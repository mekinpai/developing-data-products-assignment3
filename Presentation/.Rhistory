preproc
trainPC = predict(preProc,test[-1,])
View(trainPC)
trainPC = predict(preProc,test)
View(trainPC)
model = train(diagnosis ~ ., method = "glm", data = trainPC)
confusionMatrix(testing[,1], predict(model,testing[,-1]))
testPC = predict(preProc, testing)
confusionMatrix(testing[,1], predict(model,testing[,-1]))
confusionMatrix(testPC[,1], predict(model,testPC[,-1]))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain = createDataPartition(y=segmentationOriginal$Case, p = 0.7, list = FALSE)
training = segmentationOriginal[inTrain,]
testing = segmentationOriginal[-inTrain,]
modelfit =  train(Case~., method = "rpart", data=training)
library(rattle)
install.packages("rattle")
library(rattle)
plot(modelfit$finalModel)
plot(modelfit$finalModel, uniform=TRUE)
text(modelfit$finalModel, use.n=TRUE, all=TRUE)
modelfit$finalModel
View(testing)
set.seed(125)
training = segmentationOriginal[segmentationOriginal$class=="Train",]
data(segmentationOriginal)
training = segmentationOriginal[segmentationOriginal$class=="Train",]
View(segmentationOriginal)
training = segmentationOriginal[segmentationOriginal$Case=="Train",]
training = segmentationOriginal[segmentationOriginal$Case=="Test",]
training = segmentationOriginal[segmentationOriginal$Case=="Train",]
testing = segmentationOriginal[segmentationOriginal$Case=="Test",]
View(training)
modelfit =  train(Class~., method = "rpart", data=training)
modelfit$finalModel
plot(modelfit$finalModel, uniform=TRUE)
text(modelfit$finalModel, use.n=TRUE, all=TRUE)
text(modelfit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
plot(modelfit$finalModel, uniform=TRUE)
text(modelfit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
plot(modelfit$finalModel, uniform=TRUE, main ="classification")
text(modelfit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
plot(modelfit$finalModel, uniform=TRUE, main ="classification")
text(modelfit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
modelfit$finalModel
library(pgmm)
data(olive)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modelfit =  train(Area~., method = "rpart", data=olive)
View(olive)
predict(modelfit, newdata=newdata)
View(olive)
modelfit$finalModel
View(olive)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
fit = train(chd~age + alcohol + obesity + tobacco + typea + ldl)
fit = train(chd ~age + alcohol + obesity + tobacco + typea + ldl, data = trainSA)
fit = train(chd ~age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm" , family = "binomial")
fit = train(as.factor(chd) ~age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm" , family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(train, prediction)
missClass(train, fit)
prediction = predict(fit, train)
prediction = predict(fit, trainSA)
missClass(trainSA$chd, prediction)
fit = train(chd ~age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm" , family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
prediction = predict(fit, trainSA)
missClass(trainSA$chd, prediction$)
missClass(trainSA$chd, prediction)
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
fit = train(y~., data=vowel.train, method="rf",prox =TRUE)
library(randomForest)
fit = randomForest(y~., data=vowel.train)
order(varImp(fit), decreasing = T)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train
View(vowel.train)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
library(caret)
modelfitRF =  train(y~., method = "rf", data=vowel.train)
modelfitBoost =  train(y~., method = "gbm", data=vowel.train)
pred1  = predict(modelfitRF, vowel.test)
pred2 = predict(modelfitBoost, vowel.test)
confusionMatrix(vowel.test[,1], pred1)
confusionMatrix(vowel.test[,1], pred2)
set.seed(33833)
confusionMatrix(vowel.test[,1], pred1)
confusionMatrix(vowel.test[,1], pred2)
confusionMatrix(vowel.test[,1], pred1)$overall[1]
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
library(caret)
modelfitRF =  train(y~., method = "rf", data=vowel.train)
modelfitBoost =  train(y~., method = "gbm", data=vowel.train)
pred1  = predict(modelfitRF, vowel.test)
pred2 = predict(modelfitBoost, vowel.test)
confusionMatrix(vowel.test[,1], pred1)$overall[1]
confusionMatrix(vowel.test[,1], pred2)
confusionMatrix(pred1, vowel.test$y)$overall[1]
confusionMatrix(pred2, vowel.test$y)$overall[1]
predDF = data.frame(pred1,pred2,y=vowel.test$y)
combModFit = train(y~.,method = 'gam', data=predDF)
combPred = predict(combModFit, vowel.test)
confusionMatrix(combPred, vowel.test$y)$overall[1]
predDF = data.frame(pred1,pred2,y=vowel.test$y)
combModFit = train(y~.,method = 'gam', data=predDF)
combPred = predict(combModFit, predDF)
confusionMatrix(combPred, vowel.test$y)$overall[1]
confusionMatrix(combPred, predDF$y)$overall[1]
predDF = data.frame(pred1,pred2,y=vowel.test$y)
confusionMatrix(combPred, as.factor(predDF$y))$overall[1]
str(predDF)
combModFit = train(y~., data=predDF)
combPred = predict(combModFit, predDF)
confusionMatrix(combPred, as.factor(predDF$y))$overall[1]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modelRF = train(diagnosis~., method = 'rf', data=training)
modelGBM train(diagnosis~., method = 'gbm', verbose=FALSE, data=training)
modelGBM = train(diagnosis~., method = 'gbm', verbose=FALSE, data=training)
modelLDA = train(diagnosis~., method = 'lda', data=training)
predRF = predict(modelRF, testing)
predGBM = predict(modelGBM, testing)
predLDA = predict(modelLDA, testing)
predDF = data.frame(predRF,predGBM,predLDA,diagnosis=testing$diagnosis)
modelComb = train(diagnosis~., method='rf', data=predDF)
confusionMatrix(predRF, testing$diagnosis)$overall[1]
predAll = predict(modelComb, predDF)
confusionMatrix(predRF, testing$diagnosis)$overall[1]
confusionMatrix(predGBM, testing$diagnosis)$overall[1]
confusionMatrix(predLDA, testing$diagnosis)$overall[1]
confusionMatrix(predAll, testing$diagnosis)$overall[1]
library("acepack", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:acepack", unload=TRUE)
install.packages(c("BH", "bindr", "bindrcpp", "broom", "car", "caret", "cluster", "CORElearn", "curl", "digest", "knitr", "lava", "lme4", "MASS", "Matrix", "mgcv", "nlme", "openssl", "packrat", "pillar", "plogr", "psych", "randomForest", "Rcpp", "RCurl", "rmarkdown", "rpart", "rprojroot", "rsconnect", "stringi", "stringr", "tibble", "utf8", "viridis", "viridisLite", "withr", "yaml"))
install.packages(c("BH", "bindr", "bindrcpp", "broom", "car", "caret", "cluster", "CORElearn", "curl", "digest", "knitr", "lava", "lme4", "MASS", "Matrix", "mgcv", "nlme", "openssl", "packrat", "pillar", "plogr", "psych", "randomForest", "Rcpp", "RCurl", "rmarkdown", "rpart", "rprojroot", "rsconnect", "stringi", "stringr", "tibble", "utf8", "viridis", "viridisLite", "withr", "yaml"))
install.packages(c("BH", "bindr", "bindrcpp", "broom", "car", "caret", "cluster", "CORElearn", "curl", "digest", "knitr", "lava", "lme4", "MASS", "Matrix", "mgcv", "nlme", "openssl", "packrat", "pillar", "plogr", "psych", "randomForest", "Rcpp", "RCurl", "rmarkdown", "rpart", "rprojroot", "rsconnect", "stringi", "stringr", "tibble", "utf8", "viridis", "viridisLite", "withr", "yaml"))
install.packages(c("BH", "bindr", "bindrcpp", "broom", "car", "caret", "cluster", "CORElearn", "curl", "digest", "knitr", "lava", "lme4", "MASS", "Matrix", "mgcv", "nlme", "openssl", "packrat", "pillar", "plogr", "psych", "randomForest", "Rcpp", "RCurl", "rmarkdown", "rpart", "rprojroot", "rsconnect", "stringi", "stringr", "tibble", "utf8", "viridis", "viridisLite", "withr", "yaml"))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
library(caret)
modelfitRF =  train(y~., method = "rf", data=vowel.train)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
library(caret)
library(rattle)
install.packages("rattle")
training = read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), header=T)
validation = read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"), header=T)
dim(training)
str(training)
countNA <-sapply(training, function(y) sum(length(which(is.na(y)))))
countNA[countNA>0]
countNA <-sapply(training, function(y) sum(length(which(is.na(y)|y==""))))
countNA[countNA>0]
length(countNA[countNA>0])
View(training)
training = training[, names(countNA[countNA==0])]
training = training[, -c(1:5)]
View(training)
inTrain = createDataPartition(y=training$classe, p=0.75, list=FALSE)
training_data = training[inTrain,]
testing_date = training[-inTrain,]
testing_data = training[-inTrain,]
install.packages("nlme")
install.packages("https://togaware.com/access/rattle_5.0.14.tar.gz", repos=NULL, type="source")
install.packages("RGtk2")
library( RGtk2)
library(RGtk2)
install.packages("RGtk2")
install.packages("https://cran.r-project.org/bin/windows/contrib/3.3/RGtk2_2.20.31.zip", repos=NULL)
library(RGtk2)
install.packages("https://togaware.com/access/rattle_5.0.14.tar.gz", repos=NULL, type="source")
knitr::opts_chunk$set(echo = TRUE)
treeFit = train(Classes~., method ="rpart", data=training_data)
set.seed(1234)
library(caret)
treeFit = train(Classes~., method ="rpart", data=training_data)
training = read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), header=T)
validation = read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"), header=T)
dim(training)
str(training)
countNA <-sapply(training, function(y) sum(length(which(is.na(y)|y==""))))
countNA[countNA>0]
training = training[, names(countNA[countNA==0])]
training = training[, -c(1:5)]
inTrain = createDataPartition(y=training$classe, p=0.75, list=FALSE)
training_data = training[inTrain,]
testing_data = training[-inTrain,]
treeFit = train(Classes~., method ="rpart", data=training_data)
View(testing_data)
treeFit = train(classe~., method ="rpart", data=training_data)
print(treeFit$finalModel)
treePred = predict(treeFit, newdata = testing_data)
confusionMatrix(treePred, testing_data$classe)$overall["Accuracy"]
rfFit = train(classe~., method ="rf", data=training_data)
install.packages("caret")
install.packages("caret")
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
library(caret)
library(caret)
library(caret)
training = read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), header=T)
training = read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), header=T)
validation = read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"), header=T)
dim(training)
str(training)
countNA <-sapply(training, function(y) sum(length(which(is.na(y)|y==""))))
countNA[countNA>0]
training = training[, names(countNA[countNA==0])]
training = training[, -c(1:5)]
inTrain = createDataPartition(y=training$classe, p=0.75, list=FALSE)
training_data = training[inTrain,]
testing_data = training[-inTrain,]
treeFit = train(classe~., method ="rpart", data=training_data)
print(treeFit$finalModel)
treePred = predict(treeFit, newdata = testing_data)
confusionMatrix(treePred, testing_data$classe)$overall["Accuracy"]
treeResult = confusionMatrix(treePred, testing_data$classe)
treeResult$$overall["Accuracy"]
treeResult$overall["Accuracy"]
treeResult$table
treePred
length(treePred=="A")
length(treePred=="D")
treePred=="D"
count(treePred=="D")
length(treePred="D")
table(treePred)
gbmFit = train(classe~., method ="gbm", data=training_data, verbose=FALSE)
trControl = trainControl(method = "cv", number = 5)
control = trainControl(method = "cv", number = 5)
treeFit = train(classe~., method ="rpart", data=training_data, trControl = control)
print(treeFit$finalModel)
treePred = predict(treeFit, newdata = testing_data)
treeResult = confusionMatrix(treePred, testing_data$classe)
treeResult$overall["Accuracy"]
treeResult$table
gbmFit = train(classe~., method ="gbm", data=training_data, verbose=FALSE, trControl = control)
gbmPred = predict(gbmFit, newdata = testing_data)
confusionMatrix(gbmPred, testing_data$classe)$overall["Accuracy"]
gbmResult = confusionMatrix(gbmPred, testing_data$classe)
gbmResult$overall["Accuracy"]
gbmResult$table
rfFit = train(classe~., method ="rf", data=training_data, verbose=FALSE, trControl = control)
rfPred = predict(rfFit, newdata = testing_data)
rfResult = confusionMatrix(rfPred, testing_data$classe)
rfResult$overall["Accuracy"]
rfResult$table
rfPred2 = predict(rfFit, newdata = validation)
rfPred2
View(validation)
validation$classe
?gbm
?rpart
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
library(caret)
training = read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), header=T)
validation = read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"), header=T)
dim(training)
str(training)
countNA <-sapply(training, function(y) sum(length(which(is.na(y)|y==""))))
countNA[countNA>0]
training = training[, names(countNA[countNA==0])]
training = training[, -c(1:5)]
dim(training)
inTrain = createDataPartition(y=training$classe, p=0.7, list=FALSE)
training_data = training[inTrain,]
testing_data = training[-inTrain,]
control = trainControl(method = "cv", number = 5)
treeFit = train(classe~., method ="rpart", data=training_data, trControl = control)
plot(treeFit$finalModel)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, all=TRUE, cex = .8)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, all=TRUE, cex = .8)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, all=TRUE, cex = .8)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, cex = .8)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, cex = .5)
```{r, echo=TRUE,fig.height = 5}
treeFit = train(classe~., method ="rpart", data=training_data, trControl = control)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, cex = .7)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, cex = .7)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, cex = .7)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, cex = .8)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, cex = .8)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, cex = .8)
treePred = predict(treeFit, newdata = testing_data)
treeResult = confusionMatrix(treePred, testing_data$classe)
treeResult$overall["Accuracy"]
treeResult$table
gbmFit = train(classe~., method ="gbm", data=training_data, verbose=FALSE, trControl = control)
gbmPred = predict(gbmFit, newdata = testing_data)
gbmResult = confusionMatrix(gbmPred, testing_data$classe)
gbmResult$overall["Accuracy"]
gbmResult$table
rfFit = train(classe~., method ="rf", data=training_data, trControl = control)
rfPred = predict(rfFit, newdata = testing_data)
rfResult = confusionMatrix(rfPred, testing_data$classe)
rfResult$overall["Accuracy"]
rfResult$table
rf = predict(rfFit, newdata = validation)
gbm = predict(gbmFit, newdata = validation)
data.frame(rf,gbm)
data.frame(rf,gbm)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
library(caret)
training = read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), header=T)
validation = read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"), header=T)
dim(training)
str(training)
countNA = sapply(training, function(y) sum(length(which(is.na(y)|y==""))))
countNA[countNA>0]
View(training)
training = training[, names(countNA[countNA==0])]
training = training[, -c(1:5)]
View(training)
dim(training)
inTrain = createDataPartition(y=training$classe, p=0.7, list=FALSE)
training_data = training[inTrain,]
testing_data = training[-inTrain,]
control = trainControl(method = "cv", number = 5)
?trainControl
treeFit = train(classe~., method ="rpart", data=training_data, trControl = control)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, cex = .8)
plot(treeFit$finalModel, uniform=TRUE, main = "classification tree")
text(treeFit$finalModel, use.n=TRUE, cex = .8)
treePred = predict(treeFit, newdata = testing_data)
treeResult = confusionMatrix(treePred, testing_data$classe)
treeResult$overall["Accuracy"]
treeResult$table
gbmFit = train(classe~., method ="gbm", data=training_data, verbose=FALSE, trControl = control)
?confusionMatrix
treePred = predict(treeFit, newdata = testing_data)
treeResult = confusionMatrix(testing_data$classe, treePred)
treeResult$overall["Accuracy"]
treeResult$table
table(treePred)
treePred = predict(treeFit, newdata = testing_data)
treeResult = confusionMatrix(treePred, testing_data$classe)
treeResult$overall["Accuracy"]
treeResult$table
gbmPred = predict(gbmFit, newdata = testing_data)
gbmResult = confusionMatrix(gbmPred, testing_data$classe)
gbmResult$overall["Accuracy"]
gbmResult$table
rfFit = train(classe~., method ="rf", data=training_data, trControl = control)
rfPred = predict(rfFit, newdata = testing_data)
rfResult = confusionMatrix(rfPred, testing_data$classe)
rfResult$overall["Accuracy"]
rfResult$table
rf = predict(rfFit, newdata = validation)
gbm = predict(gbmFit, newdata = validation)
data.frame(rf,gbm)
install.packages("shiny")
shiny::runApp('myApp')
runApp('myApp')
library(shiny) library(miniUI)
myFirstGadget <- function() { ui <- miniPage(
gadgetTitleBar("My First Gadget") )
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, { stopApp()
}) }
runGadget(ui, server) }
library(shiny)
library(miniUI)
myFirstGadget <- function() { ui <- miniPage(
gadgetTitleBar("My First Gadget") )
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, { stopApp()
}) }
runGadget(ui, server) }
install.packages("miniUI")
library(shiny)
library(miniUI)
myFirstGadget <- function() { ui <- miniPage(
gadgetTitleBar("My First Gadget") )
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, { stopApp()
}) }
runGadget(ui, server) }
myFirstGadget()
multiplyNumbers <- function(numbers1, numbers2) { ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"), miniContentPanel(
selectInput("num1", "First Number", choices=numb
selectInput("num2", "Second Number", choices=num )
)
server <- function(input, output, session) { observeEvent(input$done, {
num1 <- as.numeric(input$num1) num2 <- as.numeric(input$num2) stopApp(num1 * num2)
}) }
runGadget(ui, server) }
library(shiny)
library(miniUI)
multiplyNumbers <- function(numbers1, numbers2) { ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"), miniContentPanel(
selectInput("num1", "First Number", choices=numb
selectInput("num2", "Second Number", choices=num )
)
server <- function(input, output, session) { observeEvent(input$done, {
num1 <- as.numeric(input$num1) num2 <- as.numeric(input$num2) stopApp(num1 * num2)
}) }
runGadget(ui, server) }
multiplyNumbers <- function(numbers1, numbers2) { ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"), miniContentPanel(
selectInput("num1", "First Number", choices=numbers1)
selectInput("num2", "Second Number", choices=numbers2 )
)
server <- function(input, output, session) { observeEvent(input$done, {
num1 <- as.numeric(input$num1) num2 <- as.numeric(input$num2) stopApp(num1 * num2)
}) }
runGadget(ui, server) }
library(shiny)
library(miniUI)
multiplyNumbers <- function(numbers1, numbers2) { ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"), miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2 )
)
server <- function(input, output, session) { observeEvent(input$done, {
num1 <- as.numeric(input$num1) num2 <- as.numeric(input$num2) stopApp(num1 * num2)
}) }
runGadget(ui, server) }
install.packages("googleVis")
library(googleVis)
Fruits
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
M
plot(M)
plot(M)
plot(M)
print(M,"chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
M <- gvisMotionChart(Fruits, "Fruit", "Year",options=list(width=600, height=400))
plot(M)
library(shiny)
library(miniUI)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",options=list(width=600, height=400))
plot(M)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",options=list(width=600, height=400))
plot(M)
setwd("~/Documents/Coursera/Developing Data Product/Assignment 4/Assignment4/developing-data-products-assignment3/Presentation")
leaflet()
library(leaflet)
leaflet()
